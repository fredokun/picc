module Test/CSTest

def CriticalSection(n:int, lock:chan<chan<int>>) =
  lock?(door), door?(n),
  #core/io:print_str("Critical Section #"), #core/io:print_int(n), #core/io:print_str("\n"),
  let (m:int=#core/arith:add(n, 1)), door!m, end 

def SpawnAll(n:int, lock:chan<chan<int>>, term:chan<bool>) =
  [#core/arith:less_than(0,n)] tau,
    #core/io:print_str("SPAWN MORE !"), #core/io:print_int(n), #core/io:print_str("\n"),
    spawn{CriticalSection(n, lock)},
    let (m:int=#core/arith:substract(n, 1)),
    SpawnAll(m, lock, term) +
  [true] tau,
    #core/io:print_str("SPAWN END !\n"), term!true, end

def WaitSpawn(term:chan<bool>, door:chan<int>, lock:chan<chan<int>>) =
  term?(b), #core/io:print_str("Threads launched !\n"), lock!door, end

def Main() = 
  new(lock:chan<chan<int>>),
  new(door:chan<int>),
  new(term:chan<bool>),
  spawn{WaitSpawn(term,door,lock)},
  SpawnAll(10, lock, term)

